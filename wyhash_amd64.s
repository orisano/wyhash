// Code generated by command: go run gen.go -out wyhash_amd64.s -stubs stubs.go. DO NOT EDIT.

#include "textflag.h"

DATA wyp<>+0(SB)/8, $0xa0761d6478bd642f
DATA wyp<>+8(SB)/8, $0xe7037ed1a0b428db
DATA wyp<>+16(SB)/8, $0x8ebc6af09c88c6e3
DATA wyp<>+24(SB)/8, $0x589965cc75374cc3
GLOBL wyp<>(SB), RODATA|NOPTR, $32

// func sum64_amd64(seed uint64, b []byte) uint64
TEXT Â·sum64_amd64(SB), NOSPLIT, $0-40
	MOVQ seed+0(FP), R8
	MOVQ wyp<>+0(SB), R12
	MOVQ wyp<>+8(SB), R13
	MOVQ wyp<>+16(SB), R14
	MOVQ wyp<>+24(SB), R15
	MOVQ b_base+8(FP), SI
	MOVQ b_len+16(FP), AX
	SUBQ $0x20, AX
	LEAQ (SI)(AX*1), DI

loop:
	CMPQ SI, DI
	JGT  done
	MOVQ R8, R9
	MOVQ R8, R10
	MOVQ R8, R11
	MOVQ (SI), AX
	ADDQ $0x08, SI
	XORQ AX, R8
	XORQ R12, R8
	MOVQ (SI), AX
	ADDQ $0x08, SI
	XORQ AX, R9
	XORQ R13, R9
	MOVQ (SI), AX
	ADDQ $0x08, SI
	XORQ AX, R10
	XORQ R14, R10
	MOVQ (SI), AX
	ADDQ $0x08, SI
	XORQ AX, R11
	XORQ R15, R11
	MOVQ R8, AX
	MULQ R9
	XORQ AX, DX
	MOVQ DX, R8
	MOVQ R10, AX
	MULQ R11
	XORQ AX, DX
	XORQ DX, R8
	JMP  loop

done:
	MOVQ R8, ret+32(FP)
	RET
